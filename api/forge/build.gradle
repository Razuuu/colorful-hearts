plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom.runs.configureEach {
    // prevent loom from making run configurations for API
    ideConfigGenerated(false)
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    common(project(path: ':api:common', configuration: 'namedElements')) { transitive false }
    shadowBundle(project(path: ':api:common', configuration: 'transformProductionForge')) { transitive false }
}

remapJar {
    input.set shadowJar.archiveFile
}

shadowJar {
    exclude "architectury.common.accesswidener"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

sourcesJar {
    afterEvaluate {
        def sourcesTask = project(":api:common").sourcesJar
        dependsOn sourcesTask
        from sourcesTask.archiveFile.map { zipTree(it) }
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
