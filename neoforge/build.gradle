plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.shedaniel.unified-publishing"
}

apply plugin: "com.modrinth.minotaur"
apply plugin: "net.darkhax.curseforgegradle"

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    // change server run directory
    runs.server.runDir("run/server")
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven { url "https://maven.neoforged.net/releases" }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    // Common
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // Optional Dependencies
    modImplementation("squeek.appleskin:appleskin-neoforge:${rootProject.neoforge_appleskin_version}") {
        exclude module: 'modmenu'
    }
//    modRuntimeOnly("me.shedaniel.cloth:cloth-config-neoforge:${rootProject.neoforge_clothconfig_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    atAccessWideners.add(loom.accessWidenerPath.get().asFile.name)
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "${rootProject.modrinth_id}"
    versionNumber = "${project.version}"
    versionName = "[NeoForge] ${rootProject.minecraft_version}-v${project.version}"
    uploadFile = remapJar
    gameVersions = [rootProject.minecraft_version]
    loaders = ["neoforge"]
    dependencies {
        incompatible.project "overflowing-bars"
    }
    changelog = fetchChangelog()
    additionalFiles = [tasks.sourcesJar]
}

import net.darkhax.curseforgegradle.TaskPublishCurseForge
tasks.register('publishCurseForge', TaskPublishCurseForge) {
    apiToken = System.getenv("CURSEFORGE_TOKEN")
    disableVersionDetection()

    def mainFile = upload(rootProject.curseforge_id, remapJar)
    mainFile.displayName = "[NeoForge] ${rootProject.minecraft_version}-v${project.version}"
    mainFile.releaseType = "release"
    mainFile.changelog = fetchChangelog()
    mainFile.changelogType = "markdown"
    mainFile.addGameVersion("Client", rootProject.minecraft_version)
    mainFile.addModLoader("neoforge")
    mainFile.addIncompatibility("overflowing-bars")
    mainFile.withAdditionalFile(tasks.sourcesJar)
}
