plugins {
    id 'com.github.johnrengelman.shadow'
    id 'com.modrinth.minotaur'
    id 'net.darkhax.curseforgegradle'
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "colorfulhearts-common.mixins.json", "colorfulhearts-forge.mixins.json"
    }

    // change server run directory
    runs.server.runDir("run/server")
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')

    // Optional Dependencies
    modImplementation "maven.modrinth:farmers-delight:${forge_farmersdelight_version}-forge"
    modImplementation("maven.modrinth:appleskin:${forge_appleskin_version}-forge")
    modRuntimeOnly("maven.modrinth:the-undergarden:${forge_undergarden_version}-forge")
    modRuntimeOnly("maven.modrinth:raised:${forge_raised_version}-forge")
    modImplementation("maven.modrinth:eidolonrepraised:${forge_eidolonrepraised_version}-forge")
    modRuntimeOnly("maven.modrinth:curios:${forge_curios_version}-forge")
    modRuntimeOnly("maven.modrinth:overflowing-bars:${forge_overflowingbars_version}-forge")
    modRuntimeOnly("maven.modrinth:puzzles-lib:${forge_puzzleslib_version}-forge")
    modRuntimeOnly("me.shedaniel.cloth:cloth-config-forge:${forge_clothconfig_version}")
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "${rootProject.modrinth_id}"
    versionNumber = "${project.version}"
    versionName = "[Forge] ${rootProject.minecraft_version}-v${project.version}"
    uploadFile = remapJar
    gameVersions = ["1.20", rootProject.minecraft_version]
    loaders = ["forge", "neoforge"]
    dependencies {
        incompatible.project "overflowing-bars"
    }
    changelog = fetchChangelog()
    additionalFiles = [tasks.sourcesJar]
}

import net.darkhax.curseforgegradle.TaskPublishCurseForge
tasks.register('publishCurseForge', TaskPublishCurseForge) {
    apiToken = System.getenv("CURSEFORGE_TOKEN")
    disableVersionDetection()

    def mainFile = upload(rootProject.curseforge_id, remapJar)
    mainFile.displayName = "[Forge] ${rootProject.minecraft_version}-v${project.version}"
    mainFile.releaseType = "release"
    mainFile.changelog = fetchChangelog()
    mainFile.changelogType = "markdown"
    mainFile.addGameVersion("Client", "1.20", rootProject.minecraft_version)
    mainFile.addModLoader("forge", "neoforge")
    mainFile.addIncompatibility("overflowing-bars")
    mainFile.withAdditionalFile(tasks.sourcesJar)
}
