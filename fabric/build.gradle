plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

apply plugin: "com.modrinth.minotaur"
apply plugin: "net.darkhax.curseforgegradle"

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    // change server run directory
    runs.server.runDir("run/server")
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        name = "TerraformersMC Maven"
        url = "https://maven.terraformersmc.com/"
    }
}

dependencies {
    // Fabric
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    // Common
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    // Night Config
    api(include("com.electronwill.night-config:core:${nightconfig_version}"))
    api(include("com.electronwill.night-config:toml:${nightconfig_version}"))
    
    // Optional Dependencies
    modImplementation("maven.modrinth:modmenu:${fabric_modmenu_version}")
    modImplementation("maven.modrinth:appleskin:${fabric_appleskin_version}")
    modRuntimeOnly("maven.modrinth:cloth-config:${fabric_clothconfig_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.accesswidener"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "${rootProject.modrinth_id}"
    versionNumber = "${project.version}"
    versionName = "[Fabric] ${rootProject.minecraft_version}-v${project.version}"
    uploadFile = remapJar
    gameVersions = ["1.20", rootProject.minecraft_version]
    loaders = ["fabric", "quilt"]
    dependencies {
        required.project "fabric-api"
        incompatible.project "overflowing-bars"
    }
    changelog = fetchChangelog()
    additionalFiles = [tasks.sourcesJar]
}

import net.darkhax.curseforgegradle.TaskPublishCurseForge
tasks.register('publishCurseForge', TaskPublishCurseForge) {
    apiToken = System.getenv("CURSEFORGE_TOKEN")
    disableVersionDetection()

    def mainFile = upload(rootProject.curseforge_id, remapJar)
    mainFile.displayName = "[Fabric] ${rootProject.minecraft_version}-v${project.version}"
    mainFile.releaseType = "release"
    mainFile.changelog = fetchChangelog()
    mainFile.changelogType = "markdown"
    mainFile.addGameVersion("Client", "1.20", rootProject.minecraft_version)
    mainFile.addRequirement("fabric-api")
    mainFile.addModLoader("fabric", "quilt")
    mainFile.addIncompatibility("overflowing-bars")
    mainFile.withAdditionalFile(tasks.sourcesJar)
}
