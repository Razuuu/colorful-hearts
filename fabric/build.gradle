plugins {
    id 'com.github.johnrengelman.shadow'
    id 'com.modrinth.minotaur'
    id 'net.darkhax.curseforgegradle'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    // change server run directory
    runs.server.runDir("run/server")
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    // Night Config
    api(include("com.electronwill.night-config:core:${nightconfig_version}"))
    api(include("com.electronwill.night-config:toml:${nightconfig_version}"))
    
    // Optional Dependencies
    modImplementation("maven.modrinth:modmenu:${fabric_modmenu_version}-fabric")
    modImplementation("maven.modrinth:appleskin:${fabric_appleskin_version}-fabric")
    modRuntimeOnly("maven.modrinth:raised:${fabric_raised_version}-fabric")
    modRuntimeOnly("maven.modrinth:overflowing-bars:${fabric_overflowingbars_version}-fabric")
    modRuntimeOnly("maven.modrinth:puzzles-lib:${fabric_puzzleslib_version}-fabric")
    modRuntimeOnly("maven.modrinth:forge-config-api-port:${fabric_forgeconfigport_version}-fabric")
    modRuntimeOnly("me.shedaniel.cloth:cloth-config-fabric:${fabric_clothconfig_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.accesswidener"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "${rootProject.modrinth_id}"
    versionNumber = "${project.version}"
    versionName = "[Fabric] ${rootProject.minecraft_version}-v${project.version}"
    uploadFile = remapJar
    gameVersions = ["1.20", rootProject.minecraft_version]
    loaders = ["fabric", "quilt"]
    dependencies {
        required.project "fabric-api"
        incompatible.project "overflowing-bars"
    }
    changelog = fetchChangelog()
    additionalFiles = [tasks.sourcesJar]
}

import net.darkhax.curseforgegradle.TaskPublishCurseForge
tasks.register('publishCurseForge', TaskPublishCurseForge) {
    apiToken = System.getenv("CURSEFORGE_TOKEN")
    disableVersionDetection()

    def mainFile = upload(rootProject.curseforge_id, remapJar)
    mainFile.displayName = "[Fabric] ${rootProject.minecraft_version}-v${project.version}"
    mainFile.releaseType = "release"
    mainFile.changelog = fetchChangelog()
    mainFile.changelogType = "markdown"
    mainFile.addGameVersion("Client", "1.20", rootProject.minecraft_version)
    mainFile.addRequirement("fabric-api")
    mainFile.addModLoader("fabric", "quilt")
    mainFile.addIncompatibility("overflowing-bars")
    mainFile.withAdditionalFile(tasks.sourcesJar)
}
